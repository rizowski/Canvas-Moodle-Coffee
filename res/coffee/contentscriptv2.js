// Generated by CoffeeScript 1.6.3
var CanvasExtension, Display, Query, Tools, startup, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  _this = this;

CanvasExtension = (function() {
  var local, settings, sync, tools;

  settings = {
    canvasKey: null,
    assignments: {
      color: false,
      displayLate: false,
      displayRange: "7 days",
      gradeFormat: 1
    }
  };

  tools = new Tools();

  sync = chrome.storage.sync;

  local = chrome.storage.local;

  function CanvasExtension() {}

  $.ajaxSetup({
    cache: true,
    dataType: "json",
    statusCode: {
      401: function() {
        return console.log('Auth error');
      },
      404: function() {
        return console.log('Page not found');
      },
      405: function() {
        return console.log('Method not allowed');
      },
      500: function() {
        return console.log('Server error');
      }
    },
    headers: {
      "Authorization": "Bearer " + CanvasExtension.settings.canvaskey,
      "Access-Control-Allow-Origin": "*"
    }
  });

  CanvasExtension.prototype.setKey = function(item) {
    return settings.canvasKey = item;
  };

  CanvasExtension.prototype.setKeys = function(items) {
    var assignRange, colors, display_late, grades, input;
    if (items.hasOwnProperty('canvasKey')) {
      console.log('TODO set key');
    }
    if (items.hasOwnProperty('colors')) {
      console.log('TODO set colors');
      colors = items.colors;
    }
    if (items.hasOwnProperty('grades')) {
      console.log('TODO SET GRADES');
      grades = items.grades;
    }
    if (items.hasOwnProperty('assignRange')) {
      if (items.assignRange !== "") {
        input = items.assignRange.split(' ');
        assignRange = moment().add(input[1], input[0]);
      }
    }
    if (items.hasOwnProperty('late')) {
      return display_late = items.late;
    }
  };

  CanvasExtension.prototype.getSyncSettings = function() {
    return sync.get(['settings'], function(settings) {
      return setKeys(settings);
    });
  };

  CanvasExtension.prototype.saveSettings = function(item) {
    return sync.set(item);
  };

  return CanvasExtension;

})();

Tools = (function() {
  function Tools() {}

  Tools.prototype.createLink = function(url, text) {
    return "<a href='" + url + "'>" + text + "</a>";
  };

  Tools.prototype.tableRow = function(contents) {
    var content, result, _i, _len;
    result = "<tr>";
    for (_i = 0, _len = contents.length; _i < _len; _i++) {
      content = contents[_i];
      result += "<td>" + content + "</td>";
    }
    return result += "</tr>";
  };

  Tools.prototype.createTable = function(headers, contents) {
    var content_items, final_string, header, _i, _j, _len, _len1;
    if (headers == null) {
      headers = [];
    }
    if (contents == null) {
      contents = [];
    }
    if (headers.length !== contents.length) {
      return;
    }
    final_string = "<table><thead>";
    for (_i = 0, _len = headers.length; _i < _len; _i++) {
      header = headers[_i];
      final_string += "<th>" + header + "</th>";
    }
    final_string += "</thead><tbody>";
    for (_j = 0, _len1 = contents.length; _j < _len1; _j++) {
      content_items = contents[_j];
      this.table_row(content_items);
    }
    final_string += "</tbody></table>";
    return final_string;
  };

  Tools.prototype.assignmentSort = function(obj1, obj2) {
    if (!obj1) {
      return -1;
    }
    if (!obj2) {
      return -1;
    }
  };

  return Tools;

})();

Query = (function(_super) {
  __extends(Query, _super);

  function Query() {
    _ref = Query.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Query.prototype.courseUrl = "/api/v1/courses?include[]=total_scores&state[]=available";

  Query.prototype.canvasCoursesUrl = "/courses/";

  Query.prototype.assignmentUrl = function(_courseId) {
    return "/api/v1/courses/" + _courseId + "/assignments?include[]=submission";
  };

  Query.prototype.queryCourses = function(_callback) {
    var _this = this;
    return $.ajax({
      type: 'GET',
      url: this.courseUrl,
      crossDomain: true,
      success: function(data) {
        return _callback(data);
      },
      complete: function(xhr, status) {
        return $('#courseload').hide();
      }
    });
  };

  Query.prototype.queryAssignments = function(_callback) {
    var _this = this;
    return $.ajax({
      type: 'GET',
      url: this.assignmentUrl(_courseId),
      crossDomain: true,
      success: function(data) {
        return _callback(data);
      },
      error: function(xhr, status, error) {},
      complete: function(xhr, status) {
        return $('#assignload').hide();
      }
    });
  };

  return Query;

})(CanvasExtension);

Display = (function() {
  Display.prototype.HTML_RED = "#FF9999";

  function Display() {
    this.setup();
  }

  Display.prototype.preRemove = function() {
    $('aside#right-side').children('div').remove();
    $("aside#right-side").children('h2').remove();
    return $("aside#right-side").children('ul').remove();
  };

  Display.prototype.addDivs = function() {
    $("aside#right-side").append("<div id='notice-container' style='display: none;'>      <h2>Canvas to Moodle Notice</h2>      <div id='notice'></div>      </div>");
    $("aside#right-side").append("<div class='calendar'>      <h2 style='display: none;'>Calendar</h2>      <img id='calload' style='display: block; margin: 0 auto;' src='images/ajax-reload-animated.gif'/>      <div id='calendar-div' class='calendar-div' style='display: none;'>       </div></div>");
    $("aside#right-side").append("<div class='courses'>      <h2>Current Courses</h2>      <div class='course-summary-div'>        <img id='courseload' style='display: block; margin: 0 auto;' src='images/ajax-reload-animated.gif'/>        <table id='course-table' style='display: none;'>          <thead>            <th>Code</th>            <th>Name</th>            <th>Grade</th>          </thead>          <tbody id='course-t-body'></tbody>        </table>      </div></div>");
    return $("aside#right-side").append("<div class='assignments'>      <h2><a style='float: right; font-size: 10px; font-weight: normal;' class='icon-calendar-day standalone-icon' href='/calendar'>View Calendar</a>Upcoming Assignments</h2>      <div class='assignment-summary-div'>        <img id='assignload' style='display: block; margin-left: auto; margin-right: auto' src='images/ajax-reload-animated.gif'/>        <table id='assignment-table' style='display: none;'>          <thead>            <th>Due Date</th>            <th>Name</th>            <th>Pts. Worth</th>          </thead>          <tbody id='assign-t-body'></tbody>        </table>      </div></div>");
  };

  Display.prototype.formatting = function() {
    var notice;
    notice = $('#notice-container');
    notice.css('background', 'white');
    notice.css('border', '1px solid #bbb');
    return notice.css('padding', '10px');
  };

  Display.prototype.events = function() {
    $('.assignments>h2').click(function() {
      return $('.assignment-summary-div').toggle();
    });
    return $('.courses>h2').click(function() {
      return $('.course-summary-div').toggle();
    });
  };

  Display.prototype.setup = function() {
    this.remove();
    this.add_divs();
    this.prettyfy();
    this.getCalendar();
    return this.events();
  };

  Display.prototype.getCalendar = function() {
    var calendar, canvas_header, day, loading, month, month_header, month_text, table, table_header, today;
    loading = $('#calload');
    loading.show;
    calendar = $('#calendar-div');
    calendar.clndr();
    canvas_header = $('#header');
    day = $('.day');
    table = $('.clndr-table');
    table_header = $('.header-day');
    month = $('.month');
    today = $('.today');
    $('.clndr-control-button').hide();
    month_text = month.html();
    month.html("<h2>" + month_text + "</h2>");
    month_header = $('.month>h2');
    month_header.css('text-align', 'center');
    table.css('width', '100%');
    table_header.css('text-align', 'center');
    table_header.css('background', '#eee');
    table_header.css('font-weight', 'bold');
    day.css('background', '#fff');
    day.css('padding', '2px');
    day.css('text-align', 'center');
    today.css('background', canvas_header.css('background-color'));
    loading.hide();
    return calendar.fadeIn(500);
  };

  return Display;

})();

startup = function() {
  var display, notice, query;
  display = new Display();
  query = new Query();
  config.setup();
  notice = $('#notice');
  notice.html("<span style='color: red'>Canvas To Moddle has been disabled due to certain courses not displaying assignments. Instead of faulty data not being displayed, for a short durration the plugin will be disabled until an update is pushed.</span><br>Click here for progress on this issue: <a href='https://trello.com/c/oahSl8K3'>Click</a>");
  return notice.css('cursor', 'pointer');
};

$(docuemnt).ready(function() {
  return (function() {
    var checkIfAssideHasLoaded;
    return checkIfAssideHasLoaded = setInterval(function() {
      if ($('ul.events').length > 0) {
        startup();
        clearInterval(checkIfAssideHasLoaded);
      }
      return void 0;
    }, 50);
  })();
});
